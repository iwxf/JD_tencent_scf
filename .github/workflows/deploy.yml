name: Deploy(部署到云) #部署脚本每次执行就是部署最新代码上云,Sync可以用来升级部署脚本,但一般无需手动更新部署脚本
on:
  workflow_dispatch:
  schedule:
    - cron: '10 1,8,15 * * *'
jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.repository.owner.id == github.event.sender.id
    steps:
      - uses: actions/checkout@v2
        with:
          ref: 'config'
      - name: clone
        run: |
          git clone --single-branch --branch main https://github.com/zero205/JD_tencent_scf.git
          mv JD_tencent_scf/backUp/sendNotify.js JD_tencent_scf
      - name: Pre Tasks
        env:
          EXPERIMENT: ${{ secrets.EXPERIMENT }}
        run: |
          for i in 'JRBODY.txt' '.env';do  
              mv $i JD_tencent_scf && echo move $i || echo Not Have $i;
          done
          if [ -d diy ];
          then
            echo 'Dir diy exist, move contents'
            mv -f diy/* JD_tencent_scf/
          fi;
          if [ -f diy.sh ];
          then
            echo 'diy.sh exist, execute!'
            bash diy.sh
          fi;
      - uses: actions/setup-node@v2
      - name: install dependency
        working-directory: ./JD_tencent_scf
        run: |
          npm i
          npm i -g serverless
      - name: set serverless.yml and push env
        working-directory: ./JD_tencent_scf
        env:
          TENCENT_REGION: ${{ secrets.SCF_REGION }}
          TENCENT_FUNCTION_NAME: ${{ secrets.TENCENT_FUNCTION_NAME }}
          TENCENT_MEMORYSIZE: ${{ secrets.TENCENT_MEMORYSIZE }}
          TENCENT_TIMEOUT: ${{ secrets.TENCENT_TIMEOUT }}
        run: |
          if [[ ! -z $TENCENT_REGION ]]; then sed -i -E 's/region:[^\n]+/region: '"$TENCENT_REGION"'/' serverless.yml; fi;
          if [[ ! -z $TENCENT_FUNCTION_NAME ]]; then sed -i -E 's/^  name:[^\n]+/  name: '"$TENCENT_FUNCTION_NAME"'/' serverless.yml; fi;
          if [[ ! -z $TENCENT_FUNCTION_NAME ]]; then sed -i -E 's/^name:[^\n]+/name: '"$TENCENT_FUNCTION_NAME"'/' serverless.yml; fi;
          if [[ ! -z $TENCENT_MEMORYSIZE ]]; then sed -i -E 's/memorySize:[^\n]+/memorySize: '"$TENCENT_MEMORYSIZE"'/' serverless.yml; fi;
          if [[ ! -z $TENCENT_TIMEOUT ]]; then sed -i -E 's/timeout:[^\n]+/timeout: '"$TENCENT_TIMEOUT"'/' serverless.yml; fi;
          while read line;do
            echo "      $line" >> serverless.yml
          done < ../config.yml
          cat serverless.yml
          cat .env
          PUSH_VARIS=$(sed -r 's/(process.env.[a-z0-9A-Z\_]+)/\1\n/g' sendNotify.js | sed -rn 's/.*process.env.([a-z0-9A-Z\_]+).*/\1/p' | sort | uniq)
          parameter=$(tr "\n" "|" <<< $PUSH_VARIS)
          parameter=${parameter::-1}
          grep -E "^($parameter):" < ../config.yml | sed 's/: /=/' | while read line;do    echo $line >> $GITHUB_ENV;done
      - name: Check Visibility
        working-directory: ./JD_tencent_scf
        if: ${{ github.event_name == 'workflow_dispatch' && !github.event.repository.private}}
        run: |
          echo 'Not a private repo!!! Please change to private!'
          echo 'require("./sendNotify").sendNotify("仓库非私有!","配置文件部署方式仓库必须为私有!(如已经私有请忽略并反馈Issues,感谢!)")' > notify.js
          node notify.js
          rm -rf notify.js
#       - name: version check
#         working-directory: ./JD_tencent_scf
#         run: |
#           sls info | grep Nodejs16.13 && sls remove
      - name: deploy
        working-directory: ./JD_tencent_scf
        run: |
            (! (sls deploy | grep -E '错误信息|Error')) && echo '部署成功' || (echo '部署失败,可以在自己私库页面寻找常见问题解决办法(FAQ)'; echo 'require("./sendNotify").sendNotify("云函数部署异常！请重试","进入私库页面点击Action,进入对应action查看deploy步骤日志\n自己私库下方readme有常见问题解决方法",{ url: process.env.GITHUB_SERVER_URL + "/" + process.env.GITHUB_REPOSITORY + "/actions/runs/" + process.env.GITHUB_RUN_ID + "?check_suite_focus=true" })' > notify.js; node notify.js; exit 1) 
